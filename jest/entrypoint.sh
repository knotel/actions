#!/bin/bash -l
# We're expecting the json files generated by the Changes Action to be in the ${GITHUB_WORKSPACE} home directory
if [ ! -f ${GITHUB_WORKSPACE}/services.json ]; then
  echo "Services File does not exist."
  echo "Please install the changes action at https://github.com/Knotel/actions/changes"
  echo "You will need to install dependencies before running this action."
  exit 1
else
  cd ${GITHUB_WORKSPACE}
  yarn install --frozen-lockfile --force --no-lockfile --no-bin-links
  cat ${GITHUB_WORKSPACE}/services.json
  CHANGES=`cat ${GITHUB_WORKSPACE}/services.json | jq -r '@sh'`
  for service in ${CHANGES[@]}; do
    #${service:1:${#service}-2} is shorthand for removing the single quotes around the service dir
    PROJECT=$(basename ${service:1:${#service}-2})
    #$PROJECT is the name of the project, IE "atlas"
    if [ ${service:1:1} == "." ]; then
      #if the service starts with a dot, don't run Jest tests
      echo "Skipping Running Jest in $service. (Hidden Folder)"
      echo
    else
      cd ${GITHUB_WORKSPACE}
      cd ${service:1:${#service}-2}
      if [ ! -f /usr/bin/jest-action ]; then
        echo "Error! /usr/bin/jest-action File does not exist!"
      else
        if [ ! -f ${GITHUB_WORKSPACE}/${service:1:${#service}-2}/node_modules/.bin/jest ]; then
          echo "Error! ${GITHUB_WORKSPACE}/${service:1:${#service}-2}/node_modules/.bin/jest does not exist!"
          ls -al ${GITHUB_WORKSPACE}/${service:1:${#service}-2}/node_modules
          exit 1
        fi
        echo "Running Jest for Service: $service"
        $JEST_CMD $* --passWithNoTests --testLocationInResults --outputFile=report.json --json & JESTPID1=$!
        wait $JESTPID1
        echo "jest process id ${JESTPID1} finished running in ${service:1:${#service}-2}"
        sleep 2
        cat report.json | /usr/bin/jest-action
        cd ${GITHUB_WORKSPACE}/coverage/${PROJECT}
        echo "Contents of /coverage/${PROJECT}:"
        ls -al
      fi
    fi
  done
  echo "CURRENT GITHUB_REF: "
  echo ${GITHUB_REF}
  echo
  echo "CURRENT GITHUB_SHA: "
  echo ${GITHUB_SHA}
  echo
  if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
    exit 1
  fi
  if [[ -d ${GITHUB_WORKSPACE}/coverage ]]; then
    cd ${GITHUB_WORKSPACE}/coverage
    ../tools/cicd/upload_coverage_report_auth.sh
  else
    echo "Coverage directory doesn't exist!"
    exit 0
  fi
fi

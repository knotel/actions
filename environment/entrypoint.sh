#!/bin/bash -l

set -e

alias git=hub

echo "HOME is ${HOME}"

function add_key() {
  mkdir -p ${HOME}/.ssh
  chmod 700 ${HOME}/.ssh
  echo "${KNOTELBUILD_SSH_KEY}" > ${HOME}/.ssh/id_rsa
  rm -f ${HOME}/.ssh/id_rsa.pub
  chmod 600 ${HOME}/.ssh/id_rsa
  ssh-keyscan github.com >> ${HOME}/.ssh/known_hosts
  chmod 600 ${HOME}/.ssh/known_hosts
}

add_key


mknod -m 666 /dev/tty c 5 0  || true

git config --global user.email "build@knotel.com"
git config --global user.name 'Action Bronson'

cd ${GITHUB_WORKSPACE}

REPO_URL=`git remote -v | grep -m1 '^origin' | sed -Ene's#.*(https://[^[:space:]]*).*#\1#p'`
if [ -z "$REPO_URL" ]; then
  echo "-- ERROR:  Could not identify Repo url."
  echo "   It is possible this repo is already using SSH instead of HTTPS."
  exit
fi

USER=`echo $REPO_URL | sed -Ene's#https://github.com/([^/]*)/(.*).git#\1#p'`
if [ -z "$USER" ]; then
  echo "-- ERROR:  Could not identify User."
  exit
fi

REPO=`echo $REPO_URL | sed -Ene's#https://github.com/([^/]*)/(.*).git#\2#p'`
if [ -z "$REPO" ]; then
  echo "-- ERROR:  Could not identify Repo."
  exit
fi

NEW_URL="git@github.com:$USER/$REPO.git"
git remote set-url origin $NEW_URL

cd ${GITHUB_WORKSPACE}
git clean -f
git pull origin master
git checkout master -f
git config --global push.default current
git clean -f
git pull origin master
echo "Pulled newest changes."
echo
echo "Current HEAD is at:"
git rev-parse HEAD
#check again after a pull for the newest commit
if [ $(git cat-file -p $(git rev-parse HEAD) | grep parent | wc -l) = 1 ]; then
  LAST_COMMIT=$(git log -1 --pretty=%s)
  if [ "${LAST_COMMIT}" == "Publish" ]; then
    echo "LAST COMMIT WAS A PUBLISH COMMIT. CONTINUING AS EXPECTED. THANK YOU BRONSON."
    # $1 being the file you're manipulating
    # pwd here is ${GITHUB_WORKSPACE}
    # We're expecting the json files generated by the Changes Action to be in the ${GITHUB_WORKSPACE} home directory
    if [ ! -f ${GITHUB_WORKSPACE}/services.json ]; then
      echo "Services File does not exist. Exiting."
      echo "Please install the changes action at https://github.com/Knotel/actions/changes"
      exit 1
    else
      cd ${GITHUB_WORKSPACE}/environments
      #Getting a bash array of services to update
      CHANGES=($(cat ${GITHUB_WORKSPACE}/services.json | jq -r '@sh'))
      for service in ${CHANGES[@]}; do
        # example of ${service}: "frontend/atlas"
        # we're cutting off everything before the first forward slash
        service=$(echo "${service:1:${#service}-2}" | awk -F'/' '{print $2}')
        # get the current SHA as a var
        SHA=$(git rev-parse --short HEAD)
        # read from the current setting in to gather the profile
        # $1 being the file you're manipulating
        profile=$(yq read $1 "services.${service}.profile")
        # if the profile isn't defined, set it to the name of the file
        if [ ${profile} == "null" ]; then
          profile=$(echo "$1" | cut -d'.' -f1)
        fi

        #print out the data as we're changing it
        echo
        echo "OLD DATA:"
        echo "${service}:"
        yq read $1 "services.${service}"
        echo
        echo "NEW DATA:"
        echo "${service}:"
        yq write -i $1 "services.${service}.image" "${SHA}"
        echo "  image: ${SHA}"
        yq write -i $1 "services.${service}.config" "${SHA}"
        echo "  config: ${SHA}"
        yq write -i $1 "services.${service}.profile" "${profile}"
        echo "  profile: ${profile}"
      done
    fi
  fi
  cd ${GITHUB_WORKSPACE}/environments
  git add $1
  git commit -m "updated $1 with new refs"
  git push
fi
